name: build

on:
    push:
        branches: [main]

permissions:
    contents: write

env:
    CGO_ENABLED: '1'
    # 讓 workflow 與 Makefile 的 BINARY 同名（預設就是 repo 名）
    BINARY: ${{ github.event.repository.name }}

jobs:
    linux:
        name: Linux (amd64)
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-go@v5
              with:
                  go-version: '1.24.6'
                  cache: true

            - name: Install X11/GL dev packages
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    build-essential pkg-config \
                    libasound2-dev libx11-dev libxrandr-dev libxi-dev \
                    libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev \
                    libxinerama-dev libwayland-dev libxkbcommon-dev

            - name: Build
              run: make release BINARY="${{ env.BINARY }}"

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ github.event.repository.name }}-linux-amd64
                  path: dist/${{ env.BINARY }}

    windows:
        name: Windows (amd64)
        runs-on: windows-latest
        defaults:
            run:
                shell: msys2 {0}

        steps:
            - uses: actions/checkout@v4

            - name: Setup MSYS2 (toolchain + Go)
              uses: msys2/setup-msys2@v2
              with:
                  msystem: MINGW64
                  update: true
                  install: >-
                      base-devel
                      mingw-w64-x86_64-toolchain
                      mingw-w64-x86_64-go
                      mingw-w64-x86_64-pkg-config
                      make

            - name: Print versions
              run: |
                  which go && go version
                  which gcc && gcc --version
                  go env

            - name: Build
              run: make release BINARY="${{ env.BINARY }}"

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ github.event.repository.name }}-windows-amd64
                  path: dist/${{ env.BINARY }}.exe

    macos:
        name: macOS (host arch)
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-go@v5
              with:
                  go-version: '1.24.6'
                  cache: true

            - name: Detect host arch
              run: |
                  ARCH="$(uname -m)"
                  # 統一成 go/發佈常用命名
                  case "$ARCH" in
                    x86_64) ARCH_OUT=amd64 ;;
                    arm64)  ARCH_OUT=arm64 ;;
                    *)      ARCH_OUT="$ARCH" ;;
                  esac
                  echo "DARWIN_ARCH=$ARCH_OUT" >> $GITHUB_ENV
                  echo "Host arch: $ARCH_OUT"

            - name: Build
              run: make release BINARY="${{ env.BINARY }}"

            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ github.event.repository.name }}-darwin-${{ env.DARWIN_ARCH }}
                  path: dist/${{ env.BINARY }}

    release:
        name: Release (on tag)
        needs: [linux, windows, macos]
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: List artifacts
              run: ls -R artifacts

            - name: Create archives
              run: |
                  set -e
                  REPO="${{ github.event.repository.name }}"
                  BINARY="${{ env.BINARY }}"
                  mkdir -p dist

                  # Linux
                  if [ -f "artifacts/$REPO-linux-amd64/$BINARY" ]; then
                    cp "artifacts/$REPO-linux-amd64/$BINARY" "dist/${BINARY}-linux-amd64"
                    tar -C dist -czf "dist/${BINARY}-linux-amd64.tar.gz" "${BINARY}-linux-amd64"
                    rm "dist/${BINARY}-linux-amd64"
                  fi

                  # Windows
                  if [ -f "artifacts/$REPO-windows-amd64/${BINARY}.exe" ]; then
                    cp "artifacts/$REPO-windows-amd64/${BINARY}.exe" "dist/${BINARY}-windows-amd64.exe"
                    zip -j "dist/${BINARY}-windows-amd64.zip" "dist/${BINARY}-windows-amd64.exe"
                    rm "dist/${BINARY}-windows-amd64.exe"
                  fi

                  # macOS（可能是 arm64 或 amd64，統一處理）
                  for d in artifacts/$REPO-darwin-*; do
                    [ -d "$d" ] || continue
                    arch="${d##*-darwin-}"
                    if [ -f "$d/$BINARY" ]; then
                      cp "$d/$BINARY" "dist/${BINARY}-darwin-${arch}"
                      tar -C dist -czf "dist/${BINARY}-darwin-${arch}.tar.gz" "${BINARY}-darwin-${arch}"
                      rm "dist/${BINARY}-darwin-${arch}"
                    fi
                  done

            - name: Publish GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  files: dist/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
